#!/usr/bin/perl

# == zim CLI (Command Line Interface)
#  written by Rene K. Mueller
#
my $APPNAME = 'zim';
my $VERSION = '0.0.3';
#
# History:
# 2020/03/29: 0.0.3: 'extract' or 'x' to extract files
# 2020/03/29: 0.0.2: fts() with 'query' or 'q' supported
# 2020/03/28: 0.0.1: starting ZIM.pm and zim tool

BEGIN { push @INC,".","$ENV{HOME}/lib/perl5" }

use strict;
use JSON;
use ZIM;
use Time::HiRes 'time';

my $arg;
my %s2f = ( v => 'verbose', e => 'regexp', i => 'case_insens' );

my @a;
foreach(@ARGV) {
   if(/^-(\w+)/) {
      foreach(split(/|/,$1)) {
         $arg->{$s2f{$_}}++;
      }
   } elsif(/^--(\w+)$/) {
      $arg->{$1}++;
   } elsif(/^--(\w+)=(\S*)$/) {
      $arg->{$1} = $2;
   } else {
      push(@a,$_);
   }
}
@ARGV = @a;

if($arg->{version}) {
   print "$APPNAME $VERSION (ZIM $ZIM::VERSION)\n";
   exit 0;
}
my $zim = $arg->{file} = shift(@ARGV);
unless(-e $zim) {
   help();
   exit -1;
}
my $z = ZIM->new($arg);
my $cmd = shift(@ARGV);

if($cmd eq 'info' || $cmd eq 'i') {
   print to_json($z->info(),{pretty=>1,canonical=>1});

} elsif($cmd eq 'article' || $cmd eq 'a' || $cmd eq '' || $cmd eq 'extract' || $cmd eq 'x') {
   @ARGV = ( '' ) unless(@ARGV);
   foreach my $u (@ARGV) {
      if($arg && $arg->{regexp}) {
         foreach my $e (@{$z->index($_)}) {
            my $fout = $e; $fout =~ s/.+\///;
            if($cmd eq 'extract' || $cmd eq 'x') {
               print "== $e -> $fout\n";
               open(my $fh,">",$fout);
               print $fh $z->output_article($e);
               close $fh;
            } else {
               print "== $e\n";
               print $z->output_article($e);
            }
            print "\n";
         }
      } else {
         if($cmd eq 'extract' || $cmd eq 'x') {
            my $fout = $u; $fout =~ s/.+\///;
            print "== $u -> $fout\n";
            open(my $fh,">",$fout);
            print $fh $z->output_article($u);
            close $fh;
         } else {
            print $z->output_article($u);
         }
      }
      if($z->error()) {
         print "$APPNAME: ERR: ".$z->error()."\n";
      }
   }

} elsif($cmd eq 'index' || $cmd eq 'ix' || $cmd eq 'ls') {
   foreach my $i (@{$z->index()}) {
      print "$i\n";
   }
   
} elsif($cmd eq 'search' || $cmd eq 's') {
   foreach my $i (@{$z->index(shift(@ARGV))}) {
      print "$i\n";
   }
   
} elsif($cmd eq 'query' || $cmd eq 'q') {
   my $q = shift(@ARGV);
   my $st = time();
   my $r = $z->fts($q,$arg);
   printf "%d results (%.1fms):",scalar(@$r),(time()-$st)*1000 if($arg->{verbose});
   foreach my $i (@$r) {
      print to_json($i,{pretty=>0,canonical=>1}),"\n";
   }

} elsif($cmd eq 'server') {
   $z->server();
} else {
   help();
}

sub help {
   print "USAGE ${APPNAME} $VERSION: [<opts>] <zimfile> <cmd> [<arguments>]
   options:
      --verbose         increase verbosity
        -v or -vvv         \"        \"
      --version         print version and exit
      --index=<ix>      define which xapian index to consider, fts or title (default: fts)
      --regexp          with 'article' or 'a', treat arguments as regular expressions
        -e                       \"                      \"
      --case_insens     case-insentivity with 'search' or 's' command
        -i                       \"         \"

   commands:
      info              show info of zim file
         i                  \"         \"
      index             list all entries
         ix                 \"         \"
         ls                 \"         \"
      search <q>        list all entries with matching query, use optionally -i
         s <q>              \"                  \"
      article [<u>..]   output article content, optionally use -e and -i
         a [<u>..]          \"                  \"
      extract [<u>..]   extract article content to file, optionally use -e and -i
         x [<u>..]          \"                  \"
      query <q>         query internal xapian indices (fts or title), use --index=title to switch
         q <q>              \"                  \"
      
   examples:
      zim test.zim                  displays default page
      zim test.zim i                display info of zim file
      zim test.zim ix               display entire index of zim file
      zim test.zim -i s test        list urls of matching filenames
      zim test.zim a /A/Test        output articles
      zim test.zim -e -i a test     output articles matching terms case-insensitive
      zim test.zim q test           query fts using internal xapian index (if there are such)
      zim test.zim --index=title q test     query fts but only titles

";
}

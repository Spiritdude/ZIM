#!/usr/bin/perl

# == zim CLI (Command Line Interface)
#  written by Rene K. Mueller https://github.com/Spiritdude
#
our $APPNAME = 'zim';
our $VERSION = '0.0.7';
#
# License: see LICENSE file
#
# History:
# 2020/04/04: 0.0.7: new option --meta, which only output metadata of entries with 'article' command
# 2020/04/01: 0.0.6: --conf=<c1>,<c2>,... one or multiple conf files (JSON)
# 2020/03/30: 0.0.5: --output=<fname> added, early support for --library=<zim1>,<zim2>,...
# 2020/03/29: 0.0.4: 'server' enabled, very experimental web-server functionality
# 2020/03/29: 0.0.3: 'extract' or 'x' to extract files
# 2020/03/29: 0.0.2: fts() with 'query' or 'q' supported
# 2020/03/28: 0.0.1: starting ZIM.pm and zim tool

BEGIN { push @INC,".","$ENV{HOME}/lib/perl5" }

use strict;
use JSON;
use ZIM;
use Time::HiRes 'time';

my $arg;
my %s2f = ( v => 'verbose', e => 'regexp', i => 'case_insens', m => 'meta' );

$arg->{index} = 'fulltext';
$arg->{port} = 8080;
$arg->{ip} = '0.0.0.0';

my @a;
foreach(@ARGV) {
   if(/^-(\w+)/) {
      foreach(split(/|/,$1)) {
         $arg->{$s2f{$_}}++;
      }
   } elsif(/^--(\w+)$/) {
      $arg->{$1}++;
   } elsif(/^--(\w+)=(\S*)$/) {
      $arg->{$1} = $2;
   } else {
      push(@a,$_);
   }
}
@ARGV = @a;

if($arg->{version}) {
   print "$APPNAME $VERSION (ZIM $ZIM::VERSION)\n";
   exit 0;
}

foreach my $fn (split(/,/,$arg->{conf})) {
   local $/;
   if(open(my $fh,"<",$fn)) {
      print "INF: reading <$fn> configuration\n" if($arg->{verbose});
      $_ = <$fh>;
      s/(^|\n)\s*\#[^\n]*\n//mg;           # -- support '#' starting comments
      my $c = eval { return from_json($_); };
      if($c) {
         foreach my $k (sort keys %$c) {     # -- merge configuration
            if(ref($c->{$k})eq'ARRAY') {   
               $c->{$k} = join(",",@{$c->{$k}});
            }
            if($k eq 'library') { 
               $arg->{$k} .= ( $arg->{k} ? "," : "" ) . $c->{$k};    # -- concat library entries
            } else {
               $arg->{$k} = $c->{$k};
            }
         }
      } elsif($@) {
         print "ERR: $fn: $@\n";
         exit;
      }
   }
}

if($arg->{library}) {
   my $l = $arg->{library};
   $arg->{library} = [];         # -- bend it ...
   @{$arg->{library}} = split(/,/,$l);
   #@{$arg->{library}} = split(/,/,$arg->{library});     # -- won't work ...

} else {
   my $zim = $arg->{file} = shift(@ARGV);
   unless(-e $zim) {
      help();
      exit -1;
   }
}

my $z = new ZIM($arg);
my $cmd = shift(@ARGV);

if($cmd eq 'info' || $cmd eq 'i') {
   print to_json($z->info(),{pretty=>1,canonical=>1});

} elsif($cmd eq 'article' || $cmd eq 'a' || $cmd eq 'extract' || $cmd eq 'x') {
   @ARGV = ( '' ) unless(@ARGV);
   foreach my $u (@ARGV) {
      if($arg && $arg->{regexp}) {
         foreach my $e (@{$z->index($u)}) {
            my $fout = $e; $fout =~ s/.+\///;
            if($cmd eq 'extract' || $cmd eq 'x') {
               print "== $e -> $fout\n";
               open(my $fh,">",$fout);
               print $fh $z->article($e);
               close $fh;
            } else {
               print "== $e\n";
               my $c = $z->article($e,{metadata=>$arg->{meta},no_redirect=>$arg->{no_redirect}});
               print $arg->{meta} ? to_json($c,{pretty=>1,canonical=>1}) : $c;
               print "\n";
            }
         }
      } else {
         if($cmd eq 'extract' || $cmd eq 'x') {
            my $fout = $u; $fout =~ s/.+\///;
            $fout =~ s/\//_/g;
            $fout = $arg->{output} if(defined $arg->{output});
            print "== $u -> $fout\n";
            $z->article($u,{ dest=>$fout });
         } else {
            my $c = $z->article($u,{metadata=>$arg->{meta},no_redirect=>$arg->{no_redirect}});
            if(!$z->{error}) {
               print $arg->{meta} ? to_json($c,{pretty=>1,canonical=>1}) : $c;
            }
         }
      }
      if($z->error()) {
         print "$APPNAME: ERR: ".$z->error(1)."\n";
      }
   }

} elsif($cmd eq 'index' || $cmd eq 'ix' || $cmd eq 'ls' || $cmd eq '') {
   foreach my $i (@{$z->index()}) {
      print "$i\n";
   }
   
} elsif($cmd eq 'search' || $cmd eq 's') {
   foreach my $u (@{$z->index(shift(@ARGV))}) {
      print "$u\n";
   }
   
} elsif($cmd eq 'query' || $cmd eq 'q') {
   my $q = shift(@ARGV);
   my $st = time();
   my $r = $z->fts($q,$arg);
   printf "%d results (%.1fms):",scalar(@$r),(time()-$st)*1000 if($arg->{verbose});
   foreach my $i (@$r) {
      print to_json($i,{pretty=>0,canonical=>1}),"\n";
   }

} elsif($cmd eq 'server') {
   print "== zim web-server $VERSION ($ZIM::NAME $ZIM::VERSION), listening on $arg->{ip}:$arg->{port}\n";
   $z->server();

} else {
   help();
}

sub help {
   print "USAGE ${APPNAME} $VERSION: [<opts>] <zimfile> <cmd> [<arguments>]
   options:
      --verbose         increase verbosity
        -v or -vvv         \"        \"
      --version         print version and exit
      --index=<ix>      define which xapian index to consider, fts or title (default: $arg->{index})
      --regexp          treat args as regexp, in combination of 'article', 'extract' commands
        -e                       \"                      \"
      --case_insens     case-insensitivity, in combination of 'search', and -e with 'article' and 'extract'
        -i                       \"         \"
      --meta            output metadata, in combination with 'article'
        -m                       \"                   \"
      --output=<fname>  define output filename in combination with 'extract'
      --library=<z1>,<z2>,...    define a library of multiple zim files for 'server' operation (experimental)
      --port=<p>        set port for server (default: $arg->{port})
      --ip=<ip>         set address to bind server (default: $arg->{ip})
      --conf=<c1>,<c2>,...       define a set of configuration files (JSON)
                                 may contain all --key=value => \"key\": \"value\"

   commands:
      info              show info of zim file
         i                  \"       \"
      index             list all entries (default)
         ix                 \"       \"
         ls                 \"       \"
      search <q>        list all entries with matching query, use optionally -i
         s <q>              \"                  \"
      article [<u>..]   output article content, optionally use -e and -i
         a [<u>..]          \"                  \"
      extract [<u>..]   extract article content to file, optionally use -e and -i
         x [<u>..]          \"                  \"
      query <q>         query internal xapian indices (fts or title), use --index=title to switch
         q <q>              \"                  \"
      server            start web-server serving zim-file content
      
   examples:
      zim test.zim                  list all entries
      zim test.zim i                display metatada of zim file
      zim test.zim ix               display entire index of zim file
      zim test.zim -i s test        list urls of matching filenames
      zim test.zim a /A/Test        output article(s)
      zim test.zim -e -i a test     output articles matching terms case-insensitive
      zim test.zim -e -i -m a test  output articles metadata
      zim test.zim x /A/Test        extract article content as file(s)
      zim test.zim -e x '\\.png'     extract article content matching regexp
      zim test.zim q test           query fts using internal xapian index (if there are such)
      zim test.zim --index=title q test     query fts but only titles
      zim test.zim server           start web-server

";
}
